definitions:
  models.Comments:
    properties:
      created_at:
        type: string
      id:
        type: integer
      message:
        type: string
      photo:
        $ref: '#/definitions/models.Photo'
      photoID:
        type: integer
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      userID:
        type: integer
    type: object
  models.Photo:
    properties:
      caption:
        type: string
      comments:
        items:
          $ref: '#/definitions/models.Comments'
        type: array
      created_at:
        type: string
      id:
        type: integer
      photo_url:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      userID:
        type: integer
    type: object
  models.Product:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      title:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      userID:
        type: integer
    type: object
  models.SocialMedia:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      social_media_url:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      userID:
        type: integer
    type: object
  models.User:
    properties:
      age:
        minimum: 18
        type: integer
      comments:
        items:
          $ref: '#/definitions/models.Comments'
        type: array
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      photo:
        items:
          $ref: '#/definitions/models.Photo'
        type: array
      products:
        items:
          $ref: '#/definitions/models.Product'
        type: array
      social_media:
        items:
          $ref: '#/definitions/models.SocialMedia'
        type: array
      updated_at:
        type: string
      user_name:
        type: string
    required:
    - age
    type: object
info:
  contact: {}
paths:
  /photo:
    get:
      description: Get All Photo data on database.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Photo'
      security:
      - Bearer: []
      summary: get Photo
      tags:
      - Photo
  /photo/{photoId}:
    delete:
      description: Delete Photo data on database based on inputed Id.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: hellyeah
          schema:
            type: string
      security:
      - Bearer: []
      summary: Delete Photo
      tags:
      - Photo
    get:
      description: Get specific Photo data on database by Id.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Photo'
      security:
      - Bearer: []
      summary: Get Photo by Id
      tags:
      - Photo
    put:
      description: Update Photo data on database.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Photo'
      security:
      - Bearer: []
      summary: Update Photo
      tags:
      - Photo
  /photos:
    post:
      description: Save Photo data in database it take userId who post it.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Photo'
      security:
      - Bearer: []
      summary: Create Photo
      tags:
      - Photo
  /photos/{photoId}/comments:
    get:
      description: Return list of Comments.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            type: obejct
      security:
      - Bearer: []
      summary: Get All Comments.
      tags:
      - Comments
    post:
      description: Create Comment on photo it take userId who post it.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Comments'
      security:
      - Bearer: []
      summary: Create Comment
      tags:
      - Comments
  /photos/{photoId}/comments/{commentId}:
    delete:
      description: Remove Comments data on Photo by id.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Comment deleted successfully
          schema:
            type: message
        "401":
          description: Unauthorized
          schema:
            type: error
        "404":
          description: Comment not found
          schema:
            type: error
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Delete Comments
      tags:
      - Comments
  /photos/{photoId}/comments/{productId}:
    get:
      description: Return the tahs whoes tagId valu mathes id.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Comments'
      security:
      - Bearer: []
      summary: Get Single Comment by id.
      tags:
      - Comments
    put:
      description: Update tags data.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Comments'
      security:
      - Bearer: []
      summary: Update Comments
      tags:
      - Comments
  /products:
    get:
      description: Return list of tags.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            type: obejct
      security:
      - Bearer: []
      summary: Get All tags.
      tags:
      - Products
    post:
      description: Save product data in Db.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Product'
      security:
      - Bearer: []
      summary: Create Product
      tags:
      - Products
  /products/{productId}:
    delete:
      description: Remove tags data by id.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
      summary: Delete tags
      tags:
      - Products
    get:
      description: Return the tahs whoes tagId valu mathes id.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
      summary: Get Single tags by id.
      tags:
      - Products
    patch:
      description: Update tags data.
      parameters:
      - description: update tags by id
        in: path
        name: tagId
        required: true
        type: string
      - description: Update tags
        in: body
        name: tags
        required: true
        schema:
          $ref: '#/definitions/models.Product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Product'
      summary: Update tags
      tags:
      - Products
  /socialmedia:
    get:
      description: get SocialMedia data in database it take userId who post it.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SocialMedia'
      security:
      - Bearer: []
      summary: get Social Media
      tags:
      - SocialMedia
    post:
      description: Save SocialMedia data in database it take userId who post it.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SocialMedia'
      security:
      - Bearer: []
      summary: Create Social Media
      tags:
      - SocialMedia
  /socialmedia{socmedId}:
    delete:
      description: Delete SocialMedia data in database it take userId who post it.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Social Media deleted successfully
          schema:
            type: string
      security:
      - Bearer: []
      summary: Delete Social Media
      tags:
      - SocialMedia
    get:
      description: Get SocialMedia data in database it take userId who post it.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SocialMedia'
      security:
      - Bearer: []
      summary: Get Social Media
      tags:
      - SocialMedia
    put:
      description: Update SocialMedia data in database it take userId who post it.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SocialMedia'
      security:
      - Bearer: []
      summary: Update Social Media
      tags:
      - SocialMedia
  /users/login:
    post:
      description: New user Login and verived based on data in Db.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      security:
      - Bearer: []
      summary: User Login
      tags:
      - User
  /users/register:
    post:
      description: Register new user data in Db.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      security:
      - Bearer: []
      summary: Create new User
      tags:
      - User
swagger: "2.0"
